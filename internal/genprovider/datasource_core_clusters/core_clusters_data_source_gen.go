// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_core_clusters

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CoreClustersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"core_clusters": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"api_address": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"enable_public_ip": schema.BoolAttribute{
							Computed: true,
						},
						"environment_name": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"keypair_name": schema.StringAttribute{
							Computed: true,
						},
						"kube_config": schema.StringAttribute{
							Computed: true,
						},
						"kubernetes_version": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"node_addresses": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"node_count": schema.Int64Attribute{
							Computed: true,
						},
						"node_flavor": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"cpu": schema.Int64Attribute{
									Computed: true,
								},
								"disk": schema.Int64Attribute{
									Computed: true,
								},
								"ephemeral": schema.Int64Attribute{
									Computed: true,
								},
								"gpu": schema.StringAttribute{
									Computed: true,
								},
								"gpu_count": schema.Int64Attribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"ram": schema.NumberAttribute{
									Computed: true,
								},
							},
							CustomType: NodeFlavorType{
								ObjectType: types.ObjectType{
									AttrTypes: NodeFlavorValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"status_reason": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: CoreClustersType{
						ObjectType: types.ObjectType{
							AttrTypes: CoreClustersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type CoreClustersModel struct {
	CoreClusters types.Set `tfsdk:"core_clusters"`
}

var _ basetypes.ObjectTypable = CoreClustersType{}

type CoreClustersType struct {
	basetypes.ObjectType
}

func (t CoreClustersType) Equal(o attr.Type) bool {
	other, ok := o.(CoreClustersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CoreClustersType) String() string {
	return "CoreClustersType"
}

func (t CoreClustersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiAddressAttribute, ok := attributes["api_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_address is missing from object`)

		return nil, diags
	}

	apiAddressVal, ok := apiAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_address expected to be basetypes.StringValue, was: %T`, apiAddressAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	enablePublicIpAttribute, ok := attributes["enable_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_public_ip is missing from object`)

		return nil, diags
	}

	enablePublicIpVal, ok := enablePublicIpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_public_ip expected to be basetypes.BoolValue, was: %T`, enablePublicIpAttribute))
	}

	environmentNameAttribute, ok := attributes["environment_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment_name is missing from object`)

		return nil, diags
	}

	environmentNameVal, ok := environmentNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment_name expected to be basetypes.StringValue, was: %T`, environmentNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	keypairNameAttribute, ok := attributes["keypair_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keypair_name is missing from object`)

		return nil, diags
	}

	keypairNameVal, ok := keypairNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keypair_name expected to be basetypes.StringValue, was: %T`, keypairNameAttribute))
	}

	kubeConfigAttribute, ok := attributes["kube_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kube_config is missing from object`)

		return nil, diags
	}

	kubeConfigVal, ok := kubeConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kube_config expected to be basetypes.StringValue, was: %T`, kubeConfigAttribute))
	}

	kubernetesVersionAttribute, ok := attributes["kubernetes_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kubernetes_version is missing from object`)

		return nil, diags
	}

	kubernetesVersionVal, ok := kubernetesVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kubernetes_version expected to be basetypes.StringValue, was: %T`, kubernetesVersionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodeAddressesAttribute, ok := attributes["node_addresses"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_addresses is missing from object`)

		return nil, diags
	}

	nodeAddressesVal, ok := nodeAddressesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_addresses expected to be basetypes.ListValue, was: %T`, nodeAddressesAttribute))
	}

	nodeCountAttribute, ok := attributes["node_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_count is missing from object`)

		return nil, diags
	}

	nodeCountVal, ok := nodeCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_count expected to be basetypes.Int64Value, was: %T`, nodeCountAttribute))
	}

	nodeFlavorAttribute, ok := attributes["node_flavor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_flavor is missing from object`)

		return nil, diags
	}

	nodeFlavorVal, ok := nodeFlavorAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_flavor expected to be basetypes.ObjectValue, was: %T`, nodeFlavorAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusReasonAttribute, ok := attributes["status_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_reason is missing from object`)

		return nil, diags
	}

	statusReasonVal, ok := statusReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_reason expected to be basetypes.StringValue, was: %T`, statusReasonAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CoreClustersValue{
		ApiAddress:        apiAddressVal,
		CreatedAt:         createdAtVal,
		EnablePublicIp:    enablePublicIpVal,
		EnvironmentName:   environmentNameVal,
		Id:                idVal,
		KeypairName:       keypairNameVal,
		KubeConfig:        kubeConfigVal,
		KubernetesVersion: kubernetesVersionVal,
		Name:              nameVal,
		NodeAddresses:     nodeAddressesVal,
		NodeCount:         nodeCountVal,
		NodeFlavor:        nodeFlavorVal,
		Status:            statusVal,
		StatusReason:      statusReasonVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewCoreClustersValueNull() CoreClustersValue {
	return CoreClustersValue{
		state: attr.ValueStateNull,
	}
}

func NewCoreClustersValueUnknown() CoreClustersValue {
	return CoreClustersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCoreClustersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CoreClustersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CoreClustersValue Attribute Value",
				"While creating a CoreClustersValue value, a missing attribute value was detected. "+
					"A CoreClustersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreClustersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CoreClustersValue Attribute Type",
				"While creating a CoreClustersValue value, an invalid attribute value was detected. "+
					"A CoreClustersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreClustersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CoreClustersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CoreClustersValue Attribute Value",
				"While creating a CoreClustersValue value, an extra attribute value was detected. "+
					"A CoreClustersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CoreClustersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCoreClustersValueUnknown(), diags
	}

	apiAddressAttribute, ok := attributes["api_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_address is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	apiAddressVal, ok := apiAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_address expected to be basetypes.StringValue, was: %T`, apiAddressAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	enablePublicIpAttribute, ok := attributes["enable_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_public_ip is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	enablePublicIpVal, ok := enablePublicIpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_public_ip expected to be basetypes.BoolValue, was: %T`, enablePublicIpAttribute))
	}

	environmentNameAttribute, ok := attributes["environment_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment_name is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	environmentNameVal, ok := environmentNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment_name expected to be basetypes.StringValue, was: %T`, environmentNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	keypairNameAttribute, ok := attributes["keypair_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keypair_name is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	keypairNameVal, ok := keypairNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keypair_name expected to be basetypes.StringValue, was: %T`, keypairNameAttribute))
	}

	kubeConfigAttribute, ok := attributes["kube_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kube_config is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	kubeConfigVal, ok := kubeConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kube_config expected to be basetypes.StringValue, was: %T`, kubeConfigAttribute))
	}

	kubernetesVersionAttribute, ok := attributes["kubernetes_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kubernetes_version is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	kubernetesVersionVal, ok := kubernetesVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kubernetes_version expected to be basetypes.StringValue, was: %T`, kubernetesVersionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodeAddressesAttribute, ok := attributes["node_addresses"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_addresses is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	nodeAddressesVal, ok := nodeAddressesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_addresses expected to be basetypes.ListValue, was: %T`, nodeAddressesAttribute))
	}

	nodeCountAttribute, ok := attributes["node_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_count is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	nodeCountVal, ok := nodeCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_count expected to be basetypes.Int64Value, was: %T`, nodeCountAttribute))
	}

	nodeFlavorAttribute, ok := attributes["node_flavor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_flavor is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	nodeFlavorVal, ok := nodeFlavorAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_flavor expected to be basetypes.ObjectValue, was: %T`, nodeFlavorAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusReasonAttribute, ok := attributes["status_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_reason is missing from object`)

		return NewCoreClustersValueUnknown(), diags
	}

	statusReasonVal, ok := statusReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_reason expected to be basetypes.StringValue, was: %T`, statusReasonAttribute))
	}

	if diags.HasError() {
		return NewCoreClustersValueUnknown(), diags
	}

	return CoreClustersValue{
		ApiAddress:        apiAddressVal,
		CreatedAt:         createdAtVal,
		EnablePublicIp:    enablePublicIpVal,
		EnvironmentName:   environmentNameVal,
		Id:                idVal,
		KeypairName:       keypairNameVal,
		KubeConfig:        kubeConfigVal,
		KubernetesVersion: kubernetesVersionVal,
		Name:              nameVal,
		NodeAddresses:     nodeAddressesVal,
		NodeCount:         nodeCountVal,
		NodeFlavor:        nodeFlavorVal,
		Status:            statusVal,
		StatusReason:      statusReasonVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewCoreClustersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CoreClustersValue {
	object, diags := NewCoreClustersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCoreClustersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CoreClustersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCoreClustersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCoreClustersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCoreClustersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCoreClustersValueMust(CoreClustersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CoreClustersType) ValueType(ctx context.Context) attr.Value {
	return CoreClustersValue{}
}

var _ basetypes.ObjectValuable = CoreClustersValue{}

type CoreClustersValue struct {
	ApiAddress        basetypes.StringValue `tfsdk:"api_address"`
	CreatedAt         basetypes.StringValue `tfsdk:"created_at"`
	EnablePublicIp    basetypes.BoolValue   `tfsdk:"enable_public_ip"`
	EnvironmentName   basetypes.StringValue `tfsdk:"environment_name"`
	Id                basetypes.Int64Value  `tfsdk:"id"`
	KeypairName       basetypes.StringValue `tfsdk:"keypair_name"`
	KubeConfig        basetypes.StringValue `tfsdk:"kube_config"`
	KubernetesVersion basetypes.StringValue `tfsdk:"kubernetes_version"`
	Name              basetypes.StringValue `tfsdk:"name"`
	NodeAddresses     basetypes.ListValue   `tfsdk:"node_addresses"`
	NodeCount         basetypes.Int64Value  `tfsdk:"node_count"`
	NodeFlavor        basetypes.ObjectValue `tfsdk:"node_flavor"`
	Status            basetypes.StringValue `tfsdk:"status"`
	StatusReason      basetypes.StringValue `tfsdk:"status_reason"`
	state             attr.ValueState
}

func (v CoreClustersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 14)

	var val tftypes.Value
	var err error

	attrTypes["api_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enable_public_ip"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["environment_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["keypair_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kube_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kubernetes_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["node_addresses"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["node_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["node_flavor"] = basetypes.ObjectType{
		AttrTypes: NodeFlavorValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status_reason"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 14)

		val, err = v.ApiAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_address"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.EnablePublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enable_public_ip"] = val

		val, err = v.EnvironmentName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["environment_name"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.KeypairName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["keypair_name"] = val

		val, err = v.KubeConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kube_config"] = val

		val, err = v.KubernetesVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kubernetes_version"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NodeAddresses.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_addresses"] = val

		val, err = v.NodeCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_count"] = val

		val, err = v.NodeFlavor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_flavor"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.StatusReason.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status_reason"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CoreClustersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CoreClustersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CoreClustersValue) String() string {
	return "CoreClustersValue"
}

func (v CoreClustersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var nodeFlavor basetypes.ObjectValue

	if v.NodeFlavor.IsNull() {
		nodeFlavor = types.ObjectNull(
			NodeFlavorValue{}.AttributeTypes(ctx),
		)
	}

	if v.NodeFlavor.IsUnknown() {
		nodeFlavor = types.ObjectUnknown(
			NodeFlavorValue{}.AttributeTypes(ctx),
		)
	}

	if !v.NodeFlavor.IsNull() && !v.NodeFlavor.IsUnknown() {
		nodeFlavor = types.ObjectValueMust(
			NodeFlavorValue{}.AttributeTypes(ctx),
			v.NodeFlavor.Attributes(),
		)
	}

	nodeAddressesVal, d := types.ListValue(types.StringType, v.NodeAddresses.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"api_address":        basetypes.StringType{},
			"created_at":         basetypes.StringType{},
			"enable_public_ip":   basetypes.BoolType{},
			"environment_name":   basetypes.StringType{},
			"id":                 basetypes.Int64Type{},
			"keypair_name":       basetypes.StringType{},
			"kube_config":        basetypes.StringType{},
			"kubernetes_version": basetypes.StringType{},
			"name":               basetypes.StringType{},
			"node_addresses": basetypes.ListType{
				ElemType: types.StringType,
			},
			"node_count": basetypes.Int64Type{},
			"node_flavor": basetypes.ObjectType{
				AttrTypes: NodeFlavorValue{}.AttributeTypes(ctx),
			},
			"status":        basetypes.StringType{},
			"status_reason": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"api_address":        basetypes.StringType{},
		"created_at":         basetypes.StringType{},
		"enable_public_ip":   basetypes.BoolType{},
		"environment_name":   basetypes.StringType{},
		"id":                 basetypes.Int64Type{},
		"keypair_name":       basetypes.StringType{},
		"kube_config":        basetypes.StringType{},
		"kubernetes_version": basetypes.StringType{},
		"name":               basetypes.StringType{},
		"node_addresses": basetypes.ListType{
			ElemType: types.StringType,
		},
		"node_count": basetypes.Int64Type{},
		"node_flavor": basetypes.ObjectType{
			AttrTypes: NodeFlavorValue{}.AttributeTypes(ctx),
		},
		"status":        basetypes.StringType{},
		"status_reason": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_address":        v.ApiAddress,
			"created_at":         v.CreatedAt,
			"enable_public_ip":   v.EnablePublicIp,
			"environment_name":   v.EnvironmentName,
			"id":                 v.Id,
			"keypair_name":       v.KeypairName,
			"kube_config":        v.KubeConfig,
			"kubernetes_version": v.KubernetesVersion,
			"name":               v.Name,
			"node_addresses":     nodeAddressesVal,
			"node_count":         v.NodeCount,
			"node_flavor":        nodeFlavor,
			"status":             v.Status,
			"status_reason":      v.StatusReason,
		})

	return objVal, diags
}

func (v CoreClustersValue) Equal(o attr.Value) bool {
	other, ok := o.(CoreClustersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiAddress.Equal(other.ApiAddress) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.EnablePublicIp.Equal(other.EnablePublicIp) {
		return false
	}

	if !v.EnvironmentName.Equal(other.EnvironmentName) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.KeypairName.Equal(other.KeypairName) {
		return false
	}

	if !v.KubeConfig.Equal(other.KubeConfig) {
		return false
	}

	if !v.KubernetesVersion.Equal(other.KubernetesVersion) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NodeAddresses.Equal(other.NodeAddresses) {
		return false
	}

	if !v.NodeCount.Equal(other.NodeCount) {
		return false
	}

	if !v.NodeFlavor.Equal(other.NodeFlavor) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.StatusReason.Equal(other.StatusReason) {
		return false
	}

	return true
}

func (v CoreClustersValue) Type(ctx context.Context) attr.Type {
	return CoreClustersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CoreClustersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_address":        basetypes.StringType{},
		"created_at":         basetypes.StringType{},
		"enable_public_ip":   basetypes.BoolType{},
		"environment_name":   basetypes.StringType{},
		"id":                 basetypes.Int64Type{},
		"keypair_name":       basetypes.StringType{},
		"kube_config":        basetypes.StringType{},
		"kubernetes_version": basetypes.StringType{},
		"name":               basetypes.StringType{},
		"node_addresses": basetypes.ListType{
			ElemType: types.StringType,
		},
		"node_count": basetypes.Int64Type{},
		"node_flavor": basetypes.ObjectType{
			AttrTypes: NodeFlavorValue{}.AttributeTypes(ctx),
		},
		"status":        basetypes.StringType{},
		"status_reason": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NodeFlavorType{}

type NodeFlavorType struct {
	basetypes.ObjectType
}

func (t NodeFlavorType) Equal(o attr.Type) bool {
	other, ok := o.(NodeFlavorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodeFlavorType) String() string {
	return "NodeFlavorType"
}

func (t NodeFlavorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return nil, diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.Int64Value, was: %T`, cpuAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return nil, diags
	}

	diskVal, ok := diskAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.Int64Value, was: %T`, diskAttribute))
	}

	ephemeralAttribute, ok := attributes["ephemeral"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ephemeral is missing from object`)

		return nil, diags
	}

	ephemeralVal, ok := ephemeralAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ephemeral expected to be basetypes.Int64Value, was: %T`, ephemeralAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return nil, diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	gpuCountAttribute, ok := attributes["gpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_count is missing from object`)

		return nil, diags
	}

	gpuCountVal, ok := gpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_count expected to be basetypes.Int64Value, was: %T`, gpuCountAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return nil, diags
	}

	ramVal, ok := ramAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.NumberValue, was: %T`, ramAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodeFlavorValue{
		Cpu:       cpuVal,
		Disk:      diskVal,
		Ephemeral: ephemeralVal,
		Gpu:       gpuVal,
		GpuCount:  gpuCountVal,
		Id:        idVal,
		Name:      nameVal,
		Ram:       ramVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewNodeFlavorValueNull() NodeFlavorValue {
	return NodeFlavorValue{
		state: attr.ValueStateNull,
	}
}

func NewNodeFlavorValueUnknown() NodeFlavorValue {
	return NodeFlavorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodeFlavorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodeFlavorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodeFlavorValue Attribute Value",
				"While creating a NodeFlavorValue value, a missing attribute value was detected. "+
					"A NodeFlavorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodeFlavorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodeFlavorValue Attribute Type",
				"While creating a NodeFlavorValue value, an invalid attribute value was detected. "+
					"A NodeFlavorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodeFlavorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodeFlavorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodeFlavorValue Attribute Value",
				"While creating a NodeFlavorValue value, an extra attribute value was detected. "+
					"A NodeFlavorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodeFlavorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodeFlavorValueUnknown(), diags
	}

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.Int64Value, was: %T`, cpuAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	diskVal, ok := diskAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.Int64Value, was: %T`, diskAttribute))
	}

	ephemeralAttribute, ok := attributes["ephemeral"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ephemeral is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	ephemeralVal, ok := ephemeralAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ephemeral expected to be basetypes.Int64Value, was: %T`, ephemeralAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	gpuCountAttribute, ok := attributes["gpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_count is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	gpuCountVal, ok := gpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_count expected to be basetypes.Int64Value, was: %T`, gpuCountAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return NewNodeFlavorValueUnknown(), diags
	}

	ramVal, ok := ramAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.NumberValue, was: %T`, ramAttribute))
	}

	if diags.HasError() {
		return NewNodeFlavorValueUnknown(), diags
	}

	return NodeFlavorValue{
		Cpu:       cpuVal,
		Disk:      diskVal,
		Ephemeral: ephemeralVal,
		Gpu:       gpuVal,
		GpuCount:  gpuCountVal,
		Id:        idVal,
		Name:      nameVal,
		Ram:       ramVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewNodeFlavorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodeFlavorValue {
	object, diags := NewNodeFlavorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodeFlavorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodeFlavorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodeFlavorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodeFlavorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodeFlavorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodeFlavorValueMust(NodeFlavorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodeFlavorType) ValueType(ctx context.Context) attr.Value {
	return NodeFlavorValue{}
}

var _ basetypes.ObjectValuable = NodeFlavorValue{}

type NodeFlavorValue struct {
	Cpu       basetypes.Int64Value  `tfsdk:"cpu"`
	Disk      basetypes.Int64Value  `tfsdk:"disk"`
	Ephemeral basetypes.Int64Value  `tfsdk:"ephemeral"`
	Gpu       basetypes.StringValue `tfsdk:"gpu"`
	GpuCount  basetypes.Int64Value  `tfsdk:"gpu_count"`
	Id        basetypes.Int64Value  `tfsdk:"id"`
	Name      basetypes.StringValue `tfsdk:"name"`
	Ram       basetypes.NumberValue `tfsdk:"ram"`
	state     attr.ValueState
}

func (v NodeFlavorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["cpu"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["disk"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ephemeral"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["gpu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gpu_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ram"] = basetypes.NumberType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Cpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cpu"] = val

		val, err = v.Disk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disk"] = val

		val, err = v.Ephemeral.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ephemeral"] = val

		val, err = v.Gpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu"] = val

		val, err = v.GpuCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu_count"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Ram.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ram"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodeFlavorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodeFlavorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodeFlavorValue) String() string {
	return "NodeFlavorValue"
}

func (v NodeFlavorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cpu":       basetypes.Int64Type{},
		"disk":      basetypes.Int64Type{},
		"ephemeral": basetypes.Int64Type{},
		"gpu":       basetypes.StringType{},
		"gpu_count": basetypes.Int64Type{},
		"id":        basetypes.Int64Type{},
		"name":      basetypes.StringType{},
		"ram":       basetypes.NumberType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cpu":       v.Cpu,
			"disk":      v.Disk,
			"ephemeral": v.Ephemeral,
			"gpu":       v.Gpu,
			"gpu_count": v.GpuCount,
			"id":        v.Id,
			"name":      v.Name,
			"ram":       v.Ram,
		})

	return objVal, diags
}

func (v NodeFlavorValue) Equal(o attr.Value) bool {
	other, ok := o.(NodeFlavorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cpu.Equal(other.Cpu) {
		return false
	}

	if !v.Disk.Equal(other.Disk) {
		return false
	}

	if !v.Ephemeral.Equal(other.Ephemeral) {
		return false
	}

	if !v.Gpu.Equal(other.Gpu) {
		return false
	}

	if !v.GpuCount.Equal(other.GpuCount) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Ram.Equal(other.Ram) {
		return false
	}

	return true
}

func (v NodeFlavorValue) Type(ctx context.Context) attr.Type {
	return NodeFlavorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodeFlavorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cpu":       basetypes.Int64Type{},
		"disk":      basetypes.Int64Type{},
		"ephemeral": basetypes.Int64Type{},
		"gpu":       basetypes.StringType{},
		"gpu_count": basetypes.Int64Type{},
		"id":        basetypes.Int64Type{},
		"name":      basetypes.StringType{},
		"ram":       basetypes.NumberType{},
	}
}
