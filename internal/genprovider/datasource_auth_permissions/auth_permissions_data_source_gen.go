// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_auth_permissions

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AuthPermissionsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_permissions": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"endpoint": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"method": schema.StringAttribute{
							Computed: true,
						},
						"permission": schema.StringAttribute{
							Computed: true,
						},
						"resource": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: AuthPermissionsType{
						ObjectType: types.ObjectType{
							AttrTypes: AuthPermissionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type AuthPermissionsModel struct {
	AuthPermissions types.Set `tfsdk:"auth_permissions"`
}

var _ basetypes.ObjectTypable = AuthPermissionsType{}

type AuthPermissionsType struct {
	basetypes.ObjectType
}

func (t AuthPermissionsType) Equal(o attr.Type) bool {
	other, ok := o.(AuthPermissionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuthPermissionsType) String() string {
	return "AuthPermissionsType"
}

func (t AuthPermissionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	endpointAttribute, ok := attributes["endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoint is missing from object`)

		return nil, diags
	}

	endpointVal, ok := endpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoint expected to be basetypes.StringValue, was: %T`, endpointAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	methodAttribute, ok := attributes["method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`method is missing from object`)

		return nil, diags
	}

	methodVal, ok := methodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`method expected to be basetypes.StringValue, was: %T`, methodAttribute))
	}

	permissionAttribute, ok := attributes["permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permission is missing from object`)

		return nil, diags
	}

	permissionVal, ok := permissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permission expected to be basetypes.StringValue, was: %T`, permissionAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return nil, diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.StringValue, was: %T`, resourceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuthPermissionsValue{
		CreatedAt:  createdAtVal,
		Endpoint:   endpointVal,
		Id:         idVal,
		Method:     methodVal,
		Permission: permissionVal,
		Resource:   resourceVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuthPermissionsValueNull() AuthPermissionsValue {
	return AuthPermissionsValue{
		state: attr.ValueStateNull,
	}
}

func NewAuthPermissionsValueUnknown() AuthPermissionsValue {
	return AuthPermissionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuthPermissionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuthPermissionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuthPermissionsValue Attribute Value",
				"While creating a AuthPermissionsValue value, a missing attribute value was detected. "+
					"A AuthPermissionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthPermissionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuthPermissionsValue Attribute Type",
				"While creating a AuthPermissionsValue value, an invalid attribute value was detected. "+
					"A AuthPermissionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthPermissionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuthPermissionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuthPermissionsValue Attribute Value",
				"While creating a AuthPermissionsValue value, an extra attribute value was detected. "+
					"A AuthPermissionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuthPermissionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuthPermissionsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	endpointAttribute, ok := attributes["endpoint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`endpoint is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	endpointVal, ok := endpointAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`endpoint expected to be basetypes.StringValue, was: %T`, endpointAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	methodAttribute, ok := attributes["method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`method is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	methodVal, ok := methodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`method expected to be basetypes.StringValue, was: %T`, methodAttribute))
	}

	permissionAttribute, ok := attributes["permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permission is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	permissionVal, ok := permissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permission expected to be basetypes.StringValue, was: %T`, permissionAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return NewAuthPermissionsValueUnknown(), diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.StringValue, was: %T`, resourceAttribute))
	}

	if diags.HasError() {
		return NewAuthPermissionsValueUnknown(), diags
	}

	return AuthPermissionsValue{
		CreatedAt:  createdAtVal,
		Endpoint:   endpointVal,
		Id:         idVal,
		Method:     methodVal,
		Permission: permissionVal,
		Resource:   resourceVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuthPermissionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuthPermissionsValue {
	object, diags := NewAuthPermissionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuthPermissionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuthPermissionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuthPermissionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuthPermissionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuthPermissionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuthPermissionsValueMust(AuthPermissionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuthPermissionsType) ValueType(ctx context.Context) attr.Value {
	return AuthPermissionsValue{}
}

var _ basetypes.ObjectValuable = AuthPermissionsValue{}

type AuthPermissionsValue struct {
	CreatedAt  basetypes.StringValue `tfsdk:"created_at"`
	Endpoint   basetypes.StringValue `tfsdk:"endpoint"`
	Id         basetypes.Int64Value  `tfsdk:"id"`
	Method     basetypes.StringValue `tfsdk:"method"`
	Permission basetypes.StringValue `tfsdk:"permission"`
	Resource   basetypes.StringValue `tfsdk:"resource"`
	state      attr.ValueState
}

func (v AuthPermissionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["endpoint"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["method"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["permission"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Endpoint.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["endpoint"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Method.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["method"] = val

		val, err = v.Permission.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permission"] = val

		val, err = v.Resource.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuthPermissionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuthPermissionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuthPermissionsValue) String() string {
	return "AuthPermissionsValue"
}

func (v AuthPermissionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at": basetypes.StringType{},
		"endpoint":   basetypes.StringType{},
		"id":         basetypes.Int64Type{},
		"method":     basetypes.StringType{},
		"permission": basetypes.StringType{},
		"resource":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at": v.CreatedAt,
			"endpoint":   v.Endpoint,
			"id":         v.Id,
			"method":     v.Method,
			"permission": v.Permission,
			"resource":   v.Resource,
		})

	return objVal, diags
}

func (v AuthPermissionsValue) Equal(o attr.Value) bool {
	other, ok := o.(AuthPermissionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Endpoint.Equal(other.Endpoint) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Method.Equal(other.Method) {
		return false
	}

	if !v.Permission.Equal(other.Permission) {
		return false
	}

	if !v.Resource.Equal(other.Resource) {
		return false
	}

	return true
}

func (v AuthPermissionsValue) Type(ctx context.Context) attr.Type {
	return AuthPermissionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuthPermissionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at": basetypes.StringType{},
		"endpoint":   basetypes.StringType{},
		"id":         basetypes.Int64Type{},
		"method":     basetypes.StringType{},
		"permission": basetypes.StringType{},
		"resource":   basetypes.StringType{},
	}
}
