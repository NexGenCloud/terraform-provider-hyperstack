// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_core_flavors

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CoreFlavorsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"core_flavors": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"flavors": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"cpu": schema.Int64Attribute{
										Computed: true,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
									},
									"disk": schema.Int64Attribute{
										Computed: true,
									},
									"ephemeral": schema.Int64Attribute{
										Computed: true,
									},
									"gpu": schema.StringAttribute{
										Computed: true,
									},
									"gpu_count": schema.Int64Attribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"ram": schema.NumberAttribute{
										Computed: true,
									},
									"region_name": schema.StringAttribute{
										Computed: true,
									},
									"stock_available": schema.BoolAttribute{
										Computed: true,
									},
								},
								CustomType: FlavorsType{
									ObjectType: types.ObjectType{
										AttrTypes: FlavorsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"gpu": schema.StringAttribute{
							Computed: true,
						},
						"region_name": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: CoreFlavorsType{
						ObjectType: types.ObjectType{
							AttrTypes: CoreFlavorsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Region Name",
				MarkdownDescription: "Region Name",
			},
		},
	}
}

type CoreFlavorsModel struct {
	CoreFlavors types.Set    `tfsdk:"core_flavors"`
	Region      types.String `tfsdk:"region"`
}

var _ basetypes.ObjectTypable = CoreFlavorsType{}

type CoreFlavorsType struct {
	basetypes.ObjectType
}

func (t CoreFlavorsType) Equal(o attr.Type) bool {
	other, ok := o.(CoreFlavorsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CoreFlavorsType) String() string {
	return "CoreFlavorsType"
}

func (t CoreFlavorsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	flavorsAttribute, ok := attributes["flavors"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flavors is missing from object`)

		return nil, diags
	}

	flavorsVal, ok := flavorsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flavors expected to be basetypes.ListValue, was: %T`, flavorsAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return nil, diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return nil, diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CoreFlavorsValue{
		Flavors:    flavorsVal,
		Gpu:        gpuVal,
		RegionName: regionNameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewCoreFlavorsValueNull() CoreFlavorsValue {
	return CoreFlavorsValue{
		state: attr.ValueStateNull,
	}
}

func NewCoreFlavorsValueUnknown() CoreFlavorsValue {
	return CoreFlavorsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCoreFlavorsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CoreFlavorsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CoreFlavorsValue Attribute Value",
				"While creating a CoreFlavorsValue value, a missing attribute value was detected. "+
					"A CoreFlavorsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreFlavorsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CoreFlavorsValue Attribute Type",
				"While creating a CoreFlavorsValue value, an invalid attribute value was detected. "+
					"A CoreFlavorsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreFlavorsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CoreFlavorsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CoreFlavorsValue Attribute Value",
				"While creating a CoreFlavorsValue value, an extra attribute value was detected. "+
					"A CoreFlavorsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CoreFlavorsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCoreFlavorsValueUnknown(), diags
	}

	flavorsAttribute, ok := attributes["flavors"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flavors is missing from object`)

		return NewCoreFlavorsValueUnknown(), diags
	}

	flavorsVal, ok := flavorsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flavors expected to be basetypes.ListValue, was: %T`, flavorsAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return NewCoreFlavorsValueUnknown(), diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return NewCoreFlavorsValueUnknown(), diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	if diags.HasError() {
		return NewCoreFlavorsValueUnknown(), diags
	}

	return CoreFlavorsValue{
		Flavors:    flavorsVal,
		Gpu:        gpuVal,
		RegionName: regionNameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewCoreFlavorsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CoreFlavorsValue {
	object, diags := NewCoreFlavorsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCoreFlavorsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CoreFlavorsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCoreFlavorsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCoreFlavorsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCoreFlavorsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCoreFlavorsValueMust(CoreFlavorsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CoreFlavorsType) ValueType(ctx context.Context) attr.Value {
	return CoreFlavorsValue{}
}

var _ basetypes.ObjectValuable = CoreFlavorsValue{}

type CoreFlavorsValue struct {
	Flavors    basetypes.ListValue   `tfsdk:"flavors"`
	Gpu        basetypes.StringValue `tfsdk:"gpu"`
	RegionName basetypes.StringValue `tfsdk:"region_name"`
	state      attr.ValueState
}

func (v CoreFlavorsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["flavors"] = basetypes.ListType{
		ElemType: FlavorsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["gpu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Flavors.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["flavors"] = val

		val, err = v.Gpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu"] = val

		val, err = v.RegionName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CoreFlavorsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CoreFlavorsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CoreFlavorsValue) String() string {
	return "CoreFlavorsValue"
}

func (v CoreFlavorsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	flavors := types.ListValueMust(
		FlavorsType{
			basetypes.ObjectType{
				AttrTypes: FlavorsValue{}.AttributeTypes(ctx),
			},
		},
		v.Flavors.Elements(),
	)

	if v.Flavors.IsNull() {
		flavors = types.ListNull(
			FlavorsType{
				basetypes.ObjectType{
					AttrTypes: FlavorsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Flavors.IsUnknown() {
		flavors = types.ListUnknown(
			FlavorsType{
				basetypes.ObjectType{
					AttrTypes: FlavorsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"flavors": basetypes.ListType{
			ElemType: FlavorsValue{}.Type(ctx),
		},
		"gpu":         basetypes.StringType{},
		"region_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"flavors":     flavors,
			"gpu":         v.Gpu,
			"region_name": v.RegionName,
		})

	return objVal, diags
}

func (v CoreFlavorsValue) Equal(o attr.Value) bool {
	other, ok := o.(CoreFlavorsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Flavors.Equal(other.Flavors) {
		return false
	}

	if !v.Gpu.Equal(other.Gpu) {
		return false
	}

	if !v.RegionName.Equal(other.RegionName) {
		return false
	}

	return true
}

func (v CoreFlavorsValue) Type(ctx context.Context) attr.Type {
	return CoreFlavorsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CoreFlavorsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"flavors": basetypes.ListType{
			ElemType: FlavorsValue{}.Type(ctx),
		},
		"gpu":         basetypes.StringType{},
		"region_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = FlavorsType{}

type FlavorsType struct {
	basetypes.ObjectType
}

func (t FlavorsType) Equal(o attr.Type) bool {
	other, ok := o.(FlavorsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FlavorsType) String() string {
	return "FlavorsType"
}

func (t FlavorsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return nil, diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.Int64Value, was: %T`, cpuAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return nil, diags
	}

	diskVal, ok := diskAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.Int64Value, was: %T`, diskAttribute))
	}

	ephemeralAttribute, ok := attributes["ephemeral"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ephemeral is missing from object`)

		return nil, diags
	}

	ephemeralVal, ok := ephemeralAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ephemeral expected to be basetypes.Int64Value, was: %T`, ephemeralAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return nil, diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	gpuCountAttribute, ok := attributes["gpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_count is missing from object`)

		return nil, diags
	}

	gpuCountVal, ok := gpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_count expected to be basetypes.Int64Value, was: %T`, gpuCountAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return nil, diags
	}

	ramVal, ok := ramAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.NumberValue, was: %T`, ramAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return nil, diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	stockAvailableAttribute, ok := attributes["stock_available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`stock_available is missing from object`)

		return nil, diags
	}

	stockAvailableVal, ok := stockAvailableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`stock_available expected to be basetypes.BoolValue, was: %T`, stockAvailableAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FlavorsValue{
		Cpu:            cpuVal,
		CreatedAt:      createdAtVal,
		Disk:           diskVal,
		Ephemeral:      ephemeralVal,
		Gpu:            gpuVal,
		GpuCount:       gpuCountVal,
		Id:             idVal,
		Name:           nameVal,
		Ram:            ramVal,
		RegionName:     regionNameVal,
		StockAvailable: stockAvailableVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewFlavorsValueNull() FlavorsValue {
	return FlavorsValue{
		state: attr.ValueStateNull,
	}
}

func NewFlavorsValueUnknown() FlavorsValue {
	return FlavorsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFlavorsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FlavorsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FlavorsValue Attribute Value",
				"While creating a FlavorsValue value, a missing attribute value was detected. "+
					"A FlavorsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FlavorsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FlavorsValue Attribute Type",
				"While creating a FlavorsValue value, an invalid attribute value was detected. "+
					"A FlavorsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FlavorsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FlavorsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FlavorsValue Attribute Value",
				"While creating a FlavorsValue value, an extra attribute value was detected. "+
					"A FlavorsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FlavorsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFlavorsValueUnknown(), diags
	}

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.Int64Value, was: %T`, cpuAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	diskVal, ok := diskAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be basetypes.Int64Value, was: %T`, diskAttribute))
	}

	ephemeralAttribute, ok := attributes["ephemeral"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ephemeral is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	ephemeralVal, ok := ephemeralAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ephemeral expected to be basetypes.Int64Value, was: %T`, ephemeralAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	gpuCountAttribute, ok := attributes["gpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_count is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	gpuCountVal, ok := gpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_count expected to be basetypes.Int64Value, was: %T`, gpuCountAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	ramVal, ok := ramAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.NumberValue, was: %T`, ramAttribute))
	}

	regionNameAttribute, ok := attributes["region_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region_name is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	regionNameVal, ok := regionNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region_name expected to be basetypes.StringValue, was: %T`, regionNameAttribute))
	}

	stockAvailableAttribute, ok := attributes["stock_available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`stock_available is missing from object`)

		return NewFlavorsValueUnknown(), diags
	}

	stockAvailableVal, ok := stockAvailableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`stock_available expected to be basetypes.BoolValue, was: %T`, stockAvailableAttribute))
	}

	if diags.HasError() {
		return NewFlavorsValueUnknown(), diags
	}

	return FlavorsValue{
		Cpu:            cpuVal,
		CreatedAt:      createdAtVal,
		Disk:           diskVal,
		Ephemeral:      ephemeralVal,
		Gpu:            gpuVal,
		GpuCount:       gpuCountVal,
		Id:             idVal,
		Name:           nameVal,
		Ram:            ramVal,
		RegionName:     regionNameVal,
		StockAvailable: stockAvailableVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewFlavorsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FlavorsValue {
	object, diags := NewFlavorsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFlavorsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FlavorsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFlavorsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFlavorsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFlavorsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFlavorsValueMust(FlavorsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FlavorsType) ValueType(ctx context.Context) attr.Value {
	return FlavorsValue{}
}

var _ basetypes.ObjectValuable = FlavorsValue{}

type FlavorsValue struct {
	Cpu            basetypes.Int64Value  `tfsdk:"cpu"`
	CreatedAt      basetypes.StringValue `tfsdk:"created_at"`
	Disk           basetypes.Int64Value  `tfsdk:"disk"`
	Ephemeral      basetypes.Int64Value  `tfsdk:"ephemeral"`
	Gpu            basetypes.StringValue `tfsdk:"gpu"`
	GpuCount       basetypes.Int64Value  `tfsdk:"gpu_count"`
	Id             basetypes.Int64Value  `tfsdk:"id"`
	Name           basetypes.StringValue `tfsdk:"name"`
	Ram            basetypes.NumberValue `tfsdk:"ram"`
	RegionName     basetypes.StringValue `tfsdk:"region_name"`
	StockAvailable basetypes.BoolValue   `tfsdk:"stock_available"`
	state          attr.ValueState
}

func (v FlavorsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["cpu"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["disk"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ephemeral"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["gpu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gpu_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ram"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["region_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["stock_available"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.Cpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cpu"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Disk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disk"] = val

		val, err = v.Ephemeral.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ephemeral"] = val

		val, err = v.Gpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu"] = val

		val, err = v.GpuCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu_count"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Ram.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ram"] = val

		val, err = v.RegionName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region_name"] = val

		val, err = v.StockAvailable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["stock_available"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FlavorsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FlavorsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FlavorsValue) String() string {
	return "FlavorsValue"
}

func (v FlavorsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cpu":             basetypes.Int64Type{},
		"created_at":      basetypes.StringType{},
		"disk":            basetypes.Int64Type{},
		"ephemeral":       basetypes.Int64Type{},
		"gpu":             basetypes.StringType{},
		"gpu_count":       basetypes.Int64Type{},
		"id":              basetypes.Int64Type{},
		"name":            basetypes.StringType{},
		"ram":             basetypes.NumberType{},
		"region_name":     basetypes.StringType{},
		"stock_available": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cpu":             v.Cpu,
			"created_at":      v.CreatedAt,
			"disk":            v.Disk,
			"ephemeral":       v.Ephemeral,
			"gpu":             v.Gpu,
			"gpu_count":       v.GpuCount,
			"id":              v.Id,
			"name":            v.Name,
			"ram":             v.Ram,
			"region_name":     v.RegionName,
			"stock_available": v.StockAvailable,
		})

	return objVal, diags
}

func (v FlavorsValue) Equal(o attr.Value) bool {
	other, ok := o.(FlavorsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cpu.Equal(other.Cpu) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Disk.Equal(other.Disk) {
		return false
	}

	if !v.Ephemeral.Equal(other.Ephemeral) {
		return false
	}

	if !v.Gpu.Equal(other.Gpu) {
		return false
	}

	if !v.GpuCount.Equal(other.GpuCount) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Ram.Equal(other.Ram) {
		return false
	}

	if !v.RegionName.Equal(other.RegionName) {
		return false
	}

	if !v.StockAvailable.Equal(other.StockAvailable) {
		return false
	}

	return true
}

func (v FlavorsValue) Type(ctx context.Context) attr.Type {
	return FlavorsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FlavorsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cpu":             basetypes.Int64Type{},
		"created_at":      basetypes.StringType{},
		"disk":            basetypes.Int64Type{},
		"ephemeral":       basetypes.Int64Type{},
		"gpu":             basetypes.StringType{},
		"gpu_count":       basetypes.Int64Type{},
		"id":              basetypes.Int64Type{},
		"name":            basetypes.StringType{},
		"ram":             basetypes.NumberType{},
		"region_name":     basetypes.StringType{},
		"stock_available": basetypes.BoolType{},
	}
}
