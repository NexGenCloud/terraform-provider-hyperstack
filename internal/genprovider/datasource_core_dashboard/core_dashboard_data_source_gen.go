// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_core_dashboard

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CoreDashboardDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"container": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"cost_per_hour": schema.NumberAttribute{
						Computed: true,
					},
					"count": schema.Int64Attribute{
						Computed: true,
					},
					"gpus": schema.Int64Attribute{
						Computed: true,
					},
					"ram": schema.Int64Attribute{
						Computed: true,
					},
					"vcpus": schema.Int64Attribute{
						Computed: true,
					},
				},
				CustomType: ContainerType{
					ObjectType: types.ObjectType{
						AttrTypes: ContainerValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"instance": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"cost_per_hour": schema.NumberAttribute{
						Computed: true,
					},
					"count": schema.Int64Attribute{
						Computed: true,
					},
					"gpus": schema.Int64Attribute{
						Computed: true,
					},
					"ram": schema.Int64Attribute{
						Computed: true,
					},
					"vcpus": schema.Int64Attribute{
						Computed: true,
					},
				},
				CustomType: InstanceType{
					ObjectType: types.ObjectType{
						AttrTypes: InstanceValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"volume": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"cost_per_hour": schema.NumberAttribute{
						Computed: true,
					},
					"count": schema.Int64Attribute{
						Computed: true,
					},
					"using": schema.Int64Attribute{
						Computed: true,
					},
				},
				CustomType: VolumeType{
					ObjectType: types.ObjectType{
						AttrTypes: VolumeValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
		},
	}
}

type CoreDashboardModel struct {
	Container ContainerValue `tfsdk:"container"`
	Instance  InstanceValue  `tfsdk:"instance"`
	Volume    VolumeValue    `tfsdk:"volume"`
}

var _ basetypes.ObjectTypable = ContainerType{}

type ContainerType struct {
	basetypes.ObjectType
}

func (t ContainerType) Equal(o attr.Type) bool {
	other, ok := o.(ContainerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ContainerType) String() string {
	return "ContainerType"
}

func (t ContainerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return nil, diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return nil, diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return nil, diags
	}

	ramVal, ok := ramAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.Int64Value, was: %T`, ramAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return nil, diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ContainerValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Gpus:        gpusVal,
		Ram:         ramVal,
		Vcpus:       vcpusVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewContainerValueNull() ContainerValue {
	return ContainerValue{
		state: attr.ValueStateNull,
	}
}

func NewContainerValueUnknown() ContainerValue {
	return ContainerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewContainerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ContainerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ContainerValue Attribute Value",
				"While creating a ContainerValue value, a missing attribute value was detected. "+
					"A ContainerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ContainerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ContainerValue Attribute Type",
				"While creating a ContainerValue value, an invalid attribute value was detected. "+
					"A ContainerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ContainerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ContainerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ContainerValue Attribute Value",
				"While creating a ContainerValue value, an extra attribute value was detected. "+
					"A ContainerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ContainerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewContainerValueUnknown(), diags
	}

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return NewContainerValueUnknown(), diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewContainerValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return NewContainerValueUnknown(), diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return NewContainerValueUnknown(), diags
	}

	ramVal, ok := ramAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.Int64Value, was: %T`, ramAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return NewContainerValueUnknown(), diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return NewContainerValueUnknown(), diags
	}

	return ContainerValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Gpus:        gpusVal,
		Ram:         ramVal,
		Vcpus:       vcpusVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewContainerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ContainerValue {
	object, diags := NewContainerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewContainerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ContainerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewContainerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewContainerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewContainerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewContainerValueMust(ContainerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ContainerType) ValueType(ctx context.Context) attr.Value {
	return ContainerValue{}
}

var _ basetypes.ObjectValuable = ContainerValue{}

type ContainerValue struct {
	CostPerHour basetypes.NumberValue `tfsdk:"cost_per_hour"`
	Count       basetypes.Int64Value  `tfsdk:"count"`
	Gpus        basetypes.Int64Value  `tfsdk:"gpus"`
	Ram         basetypes.Int64Value  `tfsdk:"ram"`
	Vcpus       basetypes.Int64Value  `tfsdk:"vcpus"`
	state       attr.ValueState
}

func (v ContainerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["cost_per_hour"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["gpus"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ram"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["vcpus"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CostPerHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_per_hour"] = val

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.Gpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpus"] = val

		val, err = v.Ram.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ram"] = val

		val, err = v.Vcpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcpus"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ContainerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ContainerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ContainerValue) String() string {
	return "ContainerValue"
}

func (v ContainerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"gpus":          basetypes.Int64Type{},
		"ram":           basetypes.Int64Type{},
		"vcpus":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cost_per_hour": v.CostPerHour,
			"count":         v.Count,
			"gpus":          v.Gpus,
			"ram":           v.Ram,
			"vcpus":         v.Vcpus,
		})

	return objVal, diags
}

func (v ContainerValue) Equal(o attr.Value) bool {
	other, ok := o.(ContainerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostPerHour.Equal(other.CostPerHour) {
		return false
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.Gpus.Equal(other.Gpus) {
		return false
	}

	if !v.Ram.Equal(other.Ram) {
		return false
	}

	if !v.Vcpus.Equal(other.Vcpus) {
		return false
	}

	return true
}

func (v ContainerValue) Type(ctx context.Context) attr.Type {
	return ContainerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ContainerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"gpus":          basetypes.Int64Type{},
		"ram":           basetypes.Int64Type{},
		"vcpus":         basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = InstanceType{}

type InstanceType struct {
	basetypes.ObjectType
}

func (t InstanceType) Equal(o attr.Type) bool {
	other, ok := o.(InstanceType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InstanceType) String() string {
	return "InstanceType"
}

func (t InstanceType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return nil, diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return nil, diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return nil, diags
	}

	ramVal, ok := ramAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.Int64Value, was: %T`, ramAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return nil, diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InstanceValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Gpus:        gpusVal,
		Ram:         ramVal,
		Vcpus:       vcpusVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewInstanceValueNull() InstanceValue {
	return InstanceValue{
		state: attr.ValueStateNull,
	}
}

func NewInstanceValueUnknown() InstanceValue {
	return InstanceValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInstanceValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InstanceValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InstanceValue Attribute Value",
				"While creating a InstanceValue value, a missing attribute value was detected. "+
					"A InstanceValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InstanceValue Attribute Type",
				"While creating a InstanceValue value, an invalid attribute value was detected. "+
					"A InstanceValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InstanceValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InstanceValue Attribute Value",
				"While creating a InstanceValue value, an extra attribute value was detected. "+
					"A InstanceValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InstanceValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInstanceValueUnknown(), diags
	}

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return NewInstanceValueUnknown(), diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewInstanceValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return NewInstanceValueUnknown(), diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return NewInstanceValueUnknown(), diags
	}

	ramVal, ok := ramAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be basetypes.Int64Value, was: %T`, ramAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return NewInstanceValueUnknown(), diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return NewInstanceValueUnknown(), diags
	}

	return InstanceValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Gpus:        gpusVal,
		Ram:         ramVal,
		Vcpus:       vcpusVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewInstanceValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InstanceValue {
	object, diags := NewInstanceValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInstanceValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InstanceType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInstanceValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInstanceValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInstanceValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInstanceValueMust(InstanceValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InstanceType) ValueType(ctx context.Context) attr.Value {
	return InstanceValue{}
}

var _ basetypes.ObjectValuable = InstanceValue{}

type InstanceValue struct {
	CostPerHour basetypes.NumberValue `tfsdk:"cost_per_hour"`
	Count       basetypes.Int64Value  `tfsdk:"count"`
	Gpus        basetypes.Int64Value  `tfsdk:"gpus"`
	Ram         basetypes.Int64Value  `tfsdk:"ram"`
	Vcpus       basetypes.Int64Value  `tfsdk:"vcpus"`
	state       attr.ValueState
}

func (v InstanceValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["cost_per_hour"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["gpus"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ram"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["vcpus"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CostPerHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_per_hour"] = val

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.Gpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpus"] = val

		val, err = v.Ram.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ram"] = val

		val, err = v.Vcpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcpus"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InstanceValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InstanceValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InstanceValue) String() string {
	return "InstanceValue"
}

func (v InstanceValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"gpus":          basetypes.Int64Type{},
		"ram":           basetypes.Int64Type{},
		"vcpus":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cost_per_hour": v.CostPerHour,
			"count":         v.Count,
			"gpus":          v.Gpus,
			"ram":           v.Ram,
			"vcpus":         v.Vcpus,
		})

	return objVal, diags
}

func (v InstanceValue) Equal(o attr.Value) bool {
	other, ok := o.(InstanceValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostPerHour.Equal(other.CostPerHour) {
		return false
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.Gpus.Equal(other.Gpus) {
		return false
	}

	if !v.Ram.Equal(other.Ram) {
		return false
	}

	if !v.Vcpus.Equal(other.Vcpus) {
		return false
	}

	return true
}

func (v InstanceValue) Type(ctx context.Context) attr.Type {
	return InstanceType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InstanceValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"gpus":          basetypes.Int64Type{},
		"ram":           basetypes.Int64Type{},
		"vcpus":         basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = VolumeType{}

type VolumeType struct {
	basetypes.ObjectType
}

func (t VolumeType) Equal(o attr.Type) bool {
	other, ok := o.(VolumeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VolumeType) String() string {
	return "VolumeType"
}

func (t VolumeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return nil, diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	usingAttribute, ok := attributes["using"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`using is missing from object`)

		return nil, diags
	}

	usingVal, ok := usingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`using expected to be basetypes.Int64Value, was: %T`, usingAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VolumeValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Using:       usingVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueNull() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateNull,
	}
}

func NewVolumeValueUnknown() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVolumeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VolumeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VolumeValue Attribute Value",
				"While creating a VolumeValue value, a missing attribute value was detected. "+
					"A VolumeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VolumeValue Attribute Type",
				"While creating a VolumeValue value, an invalid attribute value was detected. "+
					"A VolumeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VolumeValue Attribute Value",
				"While creating a VolumeValue value, an extra attribute value was detected. "+
					"A VolumeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VolumeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	costPerHourAttribute, ok := attributes["cost_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_per_hour is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	costPerHourVal, ok := costPerHourAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_per_hour expected to be basetypes.NumberValue, was: %T`, costPerHourAttribute))
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	usingAttribute, ok := attributes["using"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`using is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	usingVal, ok := usingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`using expected to be basetypes.Int64Value, was: %T`, usingAttribute))
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	return VolumeValue{
		CostPerHour: costPerHourVal,
		Count:       countVal,
		Using:       usingVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VolumeValue {
	object, diags := NewVolumeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVolumeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VolumeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVolumeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVolumeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVolumeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVolumeValueMust(VolumeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VolumeType) ValueType(ctx context.Context) attr.Value {
	return VolumeValue{}
}

var _ basetypes.ObjectValuable = VolumeValue{}

type VolumeValue struct {
	CostPerHour basetypes.NumberValue `tfsdk:"cost_per_hour"`
	Count       basetypes.Int64Value  `tfsdk:"count"`
	Using       basetypes.Int64Value  `tfsdk:"using"`
	state       attr.ValueState
}

func (v VolumeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["cost_per_hour"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["using"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.CostPerHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_per_hour"] = val

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.Using.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["using"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VolumeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VolumeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VolumeValue) String() string {
	return "VolumeValue"
}

func (v VolumeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"using":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cost_per_hour": v.CostPerHour,
			"count":         v.Count,
			"using":         v.Using,
		})

	return objVal, diags
}

func (v VolumeValue) Equal(o attr.Value) bool {
	other, ok := o.(VolumeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostPerHour.Equal(other.CostPerHour) {
		return false
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.Using.Equal(other.Using) {
		return false
	}

	return true
}

func (v VolumeValue) Type(ctx context.Context) attr.Type {
	return VolumeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VolumeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_per_hour": basetypes.NumberType{},
		"count":         basetypes.Int64Type{},
		"using":         basetypes.Int64Type{},
	}
}
