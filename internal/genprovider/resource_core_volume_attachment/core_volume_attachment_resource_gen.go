// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_core_volume_attachment

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CoreVolumeAttachmentResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "Manages volume attachments to virtual machines in Hyperstack.",
		MarkdownDescription: "Manages volume attachments to virtual machines in Hyperstack.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The unique identifier for the volume attachment resource. Format: vm-{vm_id}-volumes",
				MarkdownDescription: "The unique identifier for the volume attachment resource. Format: `vm-{vm_id}-volumes`",
			},
			"vm_id": schema.Int64Attribute{
				Required:            true,
				Description:         "The ID of the virtual machine to attach volumes to.",
				MarkdownDescription: "The ID of the virtual machine to attach volumes to.",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
			},
			"volume_ids": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Required:            true,
				Description:         "List of volume IDs to attach to the virtual machine.",
				MarkdownDescription: "List of volume IDs to attach to the virtual machine.",
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
			},
			"protected": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the volume attachments are protected from detachment.",
				MarkdownDescription: "Whether the volume attachments are protected from detachment.",
			},
			"volume_attachments": schema.ListNestedAttribute{
				Computed:            true,
				Description:         "List of volume attachment details returned by the API.",
				MarkdownDescription: "List of volume attachment details returned by the API.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The volume attachment ID.",
							MarkdownDescription: "The volume attachment ID.",
						},
						"volume_id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The volume ID.",
							MarkdownDescription: "The volume ID.",
						},
						"instance_id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The instance (VM) ID.",
							MarkdownDescription: "The instance (VM) ID.",
						},
						"device": schema.StringAttribute{
							Computed:            true,
							Description:         "The device path where the volume is attached.",
							MarkdownDescription: "The device path where the volume is attached.",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "The status of the volume attachment.",
							MarkdownDescription: "The status of the volume attachment.",
						},
						"protected": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether the volume attachment is protected.",
							MarkdownDescription: "Whether the volume attachment is protected.",
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The creation timestamp.",
							MarkdownDescription: "The creation timestamp.",
						},
					},
				},
			},
		},
	}
}

type CoreVolumeAttachmentModel struct {
	Id                types.String `tfsdk:"id"`
	VmId              types.Int64  `tfsdk:"vm_id"`
	VolumeIds         types.List   `tfsdk:"volume_ids"`
	Protected         types.Bool   `tfsdk:"protected"`
	VolumeAttachments types.List   `tfsdk:"volume_attachments"`
}

type VolumeAttachmentDetailsValue struct {
	Id         basetypes.Int64Value  `tfsdk:"id"`
	VolumeId   basetypes.Int64Value  `tfsdk:"volume_id"`
	InstanceId basetypes.Int64Value  `tfsdk:"instance_id"`
	Device     basetypes.StringValue `tfsdk:"device"`
	Status     basetypes.StringValue `tfsdk:"status"`
	Protected  basetypes.BoolValue   `tfsdk:"protected"`
	CreatedAt  basetypes.StringValue `tfsdk:"created_at"`
	state      attr.ValueState
}

var _ basetypes.ObjectTypable = VolumeAttachmentDetailsType{}

type VolumeAttachmentDetailsType struct {
	basetypes.ObjectType
}

func (t VolumeAttachmentDetailsType) Equal(o attr.Type) bool {
	other, ok := o.(VolumeAttachmentDetailsType)
	if !ok {
		return false
	}
	return t.ObjectType.Equal(other.ObjectType)
}

func (t VolumeAttachmentDetailsType) String() string {
	return "VolumeAttachmentDetailsType"
}

func (t VolumeAttachmentDetailsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics
	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]
	if !ok {
		diags.AddError("Attribute Missing", `id is missing from object`)
		return nil, diags
	}
	idVal, ok := idAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]
	if !ok {
		diags.AddError("Attribute Missing", `volume_id is missing from object`)
		return nil, diags
	}
	volumeIdVal, ok := volumeIdAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`volume_id expected to be basetypes.Int64Value, was: %T`, volumeIdAttribute))
	}

	instanceIdAttribute, ok := attributes["instance_id"]
	if !ok {
		diags.AddError("Attribute Missing", `instance_id is missing from object`)
		return nil, diags
	}
	instanceIdVal, ok := instanceIdAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`instance_id expected to be basetypes.Int64Value, was: %T`, instanceIdAttribute))
	}

	deviceAttribute, ok := attributes["device"]
	if !ok {
		diags.AddError("Attribute Missing", `device is missing from object`)
		return nil, diags
	}
	deviceVal, ok := deviceAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`device expected to be basetypes.StringValue, was: %T`, deviceAttribute))
	}

	statusAttribute, ok := attributes["status"]
	if !ok {
		diags.AddError("Attribute Missing", `status is missing from object`)
		return nil, diags
	}
	statusVal, ok := statusAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	protectedAttribute, ok := attributes["protected"]
	if !ok {
		diags.AddError("Attribute Missing", `protected is missing from object`)
		return nil, diags
	}
	protectedVal, ok := protectedAttribute.(basetypes.BoolValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`protected expected to be basetypes.BoolValue, was: %T`, protectedAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]
	if !ok {
		diags.AddError("Attribute Missing", `created_at is missing from object`)
		return nil, diags
	}
	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VolumeAttachmentDetailsValue{
		Id:         idVal,
		VolumeId:   volumeIdVal,
		InstanceId: instanceIdVal,
		Device:     deviceVal,
		Status:     statusVal,
		Protected:  protectedVal,
		CreatedAt:  createdAtVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVolumeAttachmentDetailsValueNull() VolumeAttachmentDetailsValue {
	return VolumeAttachmentDetailsValue{
		state: attr.ValueStateNull,
	}
}

func NewVolumeAttachmentDetailsValueUnknown() VolumeAttachmentDetailsValue {
	return VolumeAttachmentDetailsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVolumeAttachmentDetailsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VolumeAttachmentDetailsValue, diag.Diagnostics) {
	var diags diag.Diagnostics
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]
		if !ok {
			diags.AddError(
				"Missing VolumeAttachmentDetailsValue Attribute Value",
				"While creating a VolumeAttachmentDetailsValue value, a missing attribute value was detected. "+
					"A VolumeAttachmentDetailsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeAttachmentDetailsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)
			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VolumeAttachmentDetailsValue Attribute Type",
				"While creating a VolumeAttachmentDetailsValue value, an invalid attribute value was detected. "+
					"A VolumeAttachmentDetailsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeAttachmentDetailsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VolumeAttachmentDetailsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]
		if !ok {
			diags.AddError(
				"Extra VolumeAttachmentDetailsValue Attribute Value",
				"While creating a VolumeAttachmentDetailsValue value, an extra attribute value was detected. "+
					"A VolumeAttachmentDetailsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VolumeAttachmentDetailsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]
	if !ok {
		diags.AddError("Attribute Missing", `id is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	idVal, ok := idAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]
	if !ok {
		diags.AddError("Attribute Missing", `volume_id is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	volumeIdVal, ok := volumeIdAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`volume_id expected to be basetypes.Int64Value, was: %T`, volumeIdAttribute))
	}

	instanceIdAttribute, ok := attributes["instance_id"]
	if !ok {
		diags.AddError("Attribute Missing", `instance_id is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	instanceIdVal, ok := instanceIdAttribute.(basetypes.Int64Value)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`instance_id expected to be basetypes.Int64Value, was: %T`, instanceIdAttribute))
	}

	deviceAttribute, ok := attributes["device"]
	if !ok {
		diags.AddError("Attribute Missing", `device is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	deviceVal, ok := deviceAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`device expected to be basetypes.StringValue, was: %T`, deviceAttribute))
	}

	statusAttribute, ok := attributes["status"]
	if !ok {
		diags.AddError("Attribute Missing", `status is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	statusVal, ok := statusAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	protectedAttribute, ok := attributes["protected"]
	if !ok {
		diags.AddError("Attribute Missing", `protected is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	protectedVal, ok := protectedAttribute.(basetypes.BoolValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`protected expected to be basetypes.BoolValue, was: %T`, protectedAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]
	if !ok {
		diags.AddError("Attribute Missing", `created_at is missing from object`)
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}
	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)
	if !ok {
		diags.AddError("Attribute Wrong Type", fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	if diags.HasError() {
		return NewVolumeAttachmentDetailsValueUnknown(), diags
	}

	return VolumeAttachmentDetailsValue{
		Id:         idVal,
		VolumeId:   volumeIdVal,
		InstanceId: instanceIdVal,
		Device:     deviceVal,
		Status:     statusVal,
		Protected:  protectedVal,
		CreatedAt:  createdAtVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVolumeAttachmentDetailsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VolumeAttachmentDetailsValue {
	object, diags := NewVolumeAttachmentDetailsValue(attributeTypes, attributes)

	if diags.HasError() {
		diagsStrings := make([]string, 0, len(diags))
		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}
		panic("NewVolumeAttachmentDetailsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VolumeAttachmentDetailsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVolumeAttachmentDetailsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVolumeAttachmentDetailsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVolumeAttachmentDetailsValueNull(), nil
	}

	attributes := map[string]attr.Value{}
	val := map[string]tftypes.Value{}
	err := in.As(&val)
	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)
		if err != nil {
			return nil, err
		}
		attributes[k] = a
	}

	return NewVolumeAttachmentDetailsValueMust(VolumeAttachmentDetailsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VolumeAttachmentDetailsType) ValueType(ctx context.Context) attr.Value {
	return VolumeAttachmentDetailsValue{}
}

var _ basetypes.ObjectValuable = VolumeAttachmentDetailsValue{}

func (v VolumeAttachmentDetailsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["volume_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["instance_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["device"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["protected"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err := v.Id.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["id"] = val

		val, err = v.VolumeId.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["volume_id"] = val

		val, err = v.InstanceId.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["instance_id"] = val

		val, err = v.Device.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["device"] = val

		val, err = v.Status.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["status"] = val

		val, err = v.Protected.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["protected"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)
		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}
		vals["created_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VolumeAttachmentDetailsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VolumeAttachmentDetailsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VolumeAttachmentDetailsValue) String() string {
	return "VolumeAttachmentDetailsValue"
}

func (v VolumeAttachmentDetailsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":          basetypes.Int64Type{},
		"volume_id":   basetypes.Int64Type{},
		"instance_id": basetypes.Int64Type{},
		"device":      basetypes.StringType{},
		"status":      basetypes.StringType{},
		"protected":   basetypes.BoolType{},
		"created_at":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":          v.Id,
			"volume_id":   v.VolumeId,
			"instance_id": v.InstanceId,
			"device":      v.Device,
			"status":      v.Status,
			"protected":   v.Protected,
			"created_at":  v.CreatedAt,
		})

	return objVal, diags
}

func (v VolumeAttachmentDetailsValue) Equal(o attr.Value) bool {
	other, ok := o.(VolumeAttachmentDetailsValue)
	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}
	if !v.VolumeId.Equal(other.VolumeId) {
		return false
	}
	if !v.InstanceId.Equal(other.InstanceId) {
		return false
	}
	if !v.Device.Equal(other.Device) {
		return false
	}
	if !v.Status.Equal(other.Status) {
		return false
	}
	if !v.Protected.Equal(other.Protected) {
		return false
	}
	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	return true
}

func (v VolumeAttachmentDetailsValue) Type(ctx context.Context) attr.Type {
	return VolumeAttachmentDetailsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VolumeAttachmentDetailsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":          basetypes.Int64Type{},
		"volume_id":   basetypes.Int64Type{},
		"instance_id": basetypes.Int64Type{},
		"device":      basetypes.StringType{},
		"status":      basetypes.StringType{},
		"protected":   basetypes.BoolType{},
		"created_at":  basetypes.StringType{},
	}
}
