// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_core_volumes

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CoreVolumesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"core_volumes": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"bootable": schema.BoolAttribute{
							Computed: true,
						},
						"callback_url": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"environment": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: EnvironmentType{
								ObjectType: types.ObjectType{
									AttrTypes: EnvironmentValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"image_id": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"size": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"volume_type": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: CoreVolumesType{
						ObjectType: types.ObjectType{
							AttrTypes: CoreVolumesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type CoreVolumesModel struct {
	CoreVolumes types.Set `tfsdk:"core_volumes"`
}

var _ basetypes.ObjectTypable = CoreVolumesType{}

type CoreVolumesType struct {
	basetypes.ObjectType
}

func (t CoreVolumesType) Equal(o attr.Type) bool {
	other, ok := o.(CoreVolumesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CoreVolumesType) String() string {
	return "CoreVolumesType"
}

func (t CoreVolumesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bootableAttribute, ok := attributes["bootable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootable is missing from object`)

		return nil, diags
	}

	bootableVal, ok := bootableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootable expected to be basetypes.BoolValue, was: %T`, bootableAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return nil, diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	environmentAttribute, ok := attributes["environment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment is missing from object`)

		return nil, diags
	}

	environmentVal, ok := environmentAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment expected to be basetypes.ObjectValue, was: %T`, environmentAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	imageIdAttribute, ok := attributes["image_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`image_id is missing from object`)

		return nil, diags
	}

	imageIdVal, ok := imageIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`image_id expected to be basetypes.Int64Value, was: %T`, imageIdAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.StringValue, was: %T`, sizeAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	volumeTypeAttribute, ok := attributes["volume_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_type is missing from object`)

		return nil, diags
	}

	volumeTypeVal, ok := volumeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_type expected to be basetypes.StringValue, was: %T`, volumeTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CoreVolumesValue{
		Bootable:    bootableVal,
		CallbackUrl: callbackUrlVal,
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Environment: environmentVal,
		Id:          idVal,
		ImageId:     imageIdVal,
		Name:        nameVal,
		Size:        sizeVal,
		Status:      statusVal,
		UpdatedAt:   updatedAtVal,
		VolumeType:  volumeTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCoreVolumesValueNull() CoreVolumesValue {
	return CoreVolumesValue{
		state: attr.ValueStateNull,
	}
}

func NewCoreVolumesValueUnknown() CoreVolumesValue {
	return CoreVolumesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCoreVolumesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CoreVolumesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CoreVolumesValue Attribute Value",
				"While creating a CoreVolumesValue value, a missing attribute value was detected. "+
					"A CoreVolumesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreVolumesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CoreVolumesValue Attribute Type",
				"While creating a CoreVolumesValue value, an invalid attribute value was detected. "+
					"A CoreVolumesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoreVolumesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CoreVolumesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CoreVolumesValue Attribute Value",
				"While creating a CoreVolumesValue value, an extra attribute value was detected. "+
					"A CoreVolumesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CoreVolumesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCoreVolumesValueUnknown(), diags
	}

	bootableAttribute, ok := attributes["bootable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootable is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	bootableVal, ok := bootableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootable expected to be basetypes.BoolValue, was: %T`, bootableAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	environmentAttribute, ok := attributes["environment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environment is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	environmentVal, ok := environmentAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environment expected to be basetypes.ObjectValue, was: %T`, environmentAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	imageIdAttribute, ok := attributes["image_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`image_id is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	imageIdVal, ok := imageIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`image_id expected to be basetypes.Int64Value, was: %T`, imageIdAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.StringValue, was: %T`, sizeAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	volumeTypeAttribute, ok := attributes["volume_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_type is missing from object`)

		return NewCoreVolumesValueUnknown(), diags
	}

	volumeTypeVal, ok := volumeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_type expected to be basetypes.StringValue, was: %T`, volumeTypeAttribute))
	}

	if diags.HasError() {
		return NewCoreVolumesValueUnknown(), diags
	}

	return CoreVolumesValue{
		Bootable:    bootableVal,
		CallbackUrl: callbackUrlVal,
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Environment: environmentVal,
		Id:          idVal,
		ImageId:     imageIdVal,
		Name:        nameVal,
		Size:        sizeVal,
		Status:      statusVal,
		UpdatedAt:   updatedAtVal,
		VolumeType:  volumeTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCoreVolumesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CoreVolumesValue {
	object, diags := NewCoreVolumesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCoreVolumesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CoreVolumesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCoreVolumesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCoreVolumesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCoreVolumesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCoreVolumesValueMust(CoreVolumesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CoreVolumesType) ValueType(ctx context.Context) attr.Value {
	return CoreVolumesValue{}
}

var _ basetypes.ObjectValuable = CoreVolumesValue{}

type CoreVolumesValue struct {
	Bootable    basetypes.BoolValue   `tfsdk:"bootable"`
	CallbackUrl basetypes.StringValue `tfsdk:"callback_url"`
	CreatedAt   basetypes.StringValue `tfsdk:"created_at"`
	Description basetypes.StringValue `tfsdk:"description"`
	Environment basetypes.ObjectValue `tfsdk:"environment"`
	Id          basetypes.Int64Value  `tfsdk:"id"`
	ImageId     basetypes.Int64Value  `tfsdk:"image_id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Size        basetypes.StringValue `tfsdk:"size"`
	Status      basetypes.StringValue `tfsdk:"status"`
	UpdatedAt   basetypes.StringValue `tfsdk:"updated_at"`
	VolumeType  basetypes.StringValue `tfsdk:"volume_type"`
	state       attr.ValueState
}

func (v CoreVolumesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["bootable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["callback_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["environment"] = basetypes.ObjectType{
		AttrTypes: EnvironmentValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["image_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["size"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Bootable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bootable"] = val

		val, err = v.CallbackUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["callback_url"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Environment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["environment"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ImageId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["image_id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.VolumeType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CoreVolumesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CoreVolumesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CoreVolumesValue) String() string {
	return "CoreVolumesValue"
}

func (v CoreVolumesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var environment basetypes.ObjectValue

	if v.Environment.IsNull() {
		environment = types.ObjectNull(
			EnvironmentValue{}.AttributeTypes(ctx),
		)
	}

	if v.Environment.IsUnknown() {
		environment = types.ObjectUnknown(
			EnvironmentValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Environment.IsNull() && !v.Environment.IsUnknown() {
		environment = types.ObjectValueMust(
			EnvironmentValue{}.AttributeTypes(ctx),
			v.Environment.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"bootable":     basetypes.BoolType{},
		"callback_url": basetypes.StringType{},
		"created_at":   basetypes.StringType{},
		"description":  basetypes.StringType{},
		"environment": basetypes.ObjectType{
			AttrTypes: EnvironmentValue{}.AttributeTypes(ctx),
		},
		"id":          basetypes.Int64Type{},
		"image_id":    basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"size":        basetypes.StringType{},
		"status":      basetypes.StringType{},
		"updated_at":  basetypes.StringType{},
		"volume_type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bootable":     v.Bootable,
			"callback_url": v.CallbackUrl,
			"created_at":   v.CreatedAt,
			"description":  v.Description,
			"environment":  environment,
			"id":           v.Id,
			"image_id":     v.ImageId,
			"name":         v.Name,
			"size":         v.Size,
			"status":       v.Status,
			"updated_at":   v.UpdatedAt,
			"volume_type":  v.VolumeType,
		})

	return objVal, diags
}

func (v CoreVolumesValue) Equal(o attr.Value) bool {
	other, ok := o.(CoreVolumesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bootable.Equal(other.Bootable) {
		return false
	}

	if !v.CallbackUrl.Equal(other.CallbackUrl) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Environment.Equal(other.Environment) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ImageId.Equal(other.ImageId) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.VolumeType.Equal(other.VolumeType) {
		return false
	}

	return true
}

func (v CoreVolumesValue) Type(ctx context.Context) attr.Type {
	return CoreVolumesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CoreVolumesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bootable":     basetypes.BoolType{},
		"callback_url": basetypes.StringType{},
		"created_at":   basetypes.StringType{},
		"description":  basetypes.StringType{},
		"environment": basetypes.ObjectType{
			AttrTypes: EnvironmentValue{}.AttributeTypes(ctx),
		},
		"id":          basetypes.Int64Type{},
		"image_id":    basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"size":        basetypes.StringType{},
		"status":      basetypes.StringType{},
		"updated_at":  basetypes.StringType{},
		"volume_type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EnvironmentType{}

type EnvironmentType struct {
	basetypes.ObjectType
}

func (t EnvironmentType) Equal(o attr.Type) bool {
	other, ok := o.(EnvironmentType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EnvironmentType) String() string {
	return "EnvironmentType"
}

func (t EnvironmentType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EnvironmentValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewEnvironmentValueNull() EnvironmentValue {
	return EnvironmentValue{
		state: attr.ValueStateNull,
	}
}

func NewEnvironmentValueUnknown() EnvironmentValue {
	return EnvironmentValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEnvironmentValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EnvironmentValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EnvironmentValue Attribute Value",
				"While creating a EnvironmentValue value, a missing attribute value was detected. "+
					"A EnvironmentValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EnvironmentValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EnvironmentValue Attribute Type",
				"While creating a EnvironmentValue value, an invalid attribute value was detected. "+
					"A EnvironmentValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EnvironmentValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EnvironmentValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EnvironmentValue Attribute Value",
				"While creating a EnvironmentValue value, an extra attribute value was detected. "+
					"A EnvironmentValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EnvironmentValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEnvironmentValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewEnvironmentValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewEnvironmentValueUnknown(), diags
	}

	return EnvironmentValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewEnvironmentValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EnvironmentValue {
	object, diags := NewEnvironmentValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEnvironmentValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EnvironmentType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEnvironmentValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEnvironmentValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEnvironmentValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEnvironmentValueMust(EnvironmentValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EnvironmentType) ValueType(ctx context.Context) attr.Value {
	return EnvironmentValue{}
}

var _ basetypes.ObjectValuable = EnvironmentValue{}

type EnvironmentValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v EnvironmentValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EnvironmentValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EnvironmentValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EnvironmentValue) String() string {
	return "EnvironmentValue"
}

func (v EnvironmentValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name": v.Name,
		})

	return objVal, diags
}

func (v EnvironmentValue) Equal(o attr.Value) bool {
	other, ok := o.(EnvironmentValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v EnvironmentValue) Type(ctx context.Context) attr.Type {
	return EnvironmentType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EnvironmentValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name": basetypes.StringType{},
	}
}
