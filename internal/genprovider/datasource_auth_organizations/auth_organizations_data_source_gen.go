// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_auth_organizations

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AuthOrganizationsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"users": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"email": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"joined_at": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"rbac_roles": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: RbacRolesType{
									ObjectType: types.ObjectType{
										AttrTypes: RbacRolesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"role": schema.StringAttribute{
							Computed: true,
						},
						"sub": schema.StringAttribute{
							Computed: true,
						},
						"username": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: UsersType{
						ObjectType: types.ObjectType{
							AttrTypes: UsersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type AuthOrganizationsModel struct {
	CreatedAt types.String `tfsdk:"created_at"`
	Id        types.Int64  `tfsdk:"id"`
	Name      types.String `tfsdk:"name"`
	Users     types.List   `tfsdk:"users"`
}

var _ basetypes.ObjectTypable = UsersType{}

type UsersType struct {
	basetypes.ObjectType
}

func (t UsersType) Equal(o attr.Type) bool {
	other, ok := o.(UsersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UsersType) String() string {
	return "UsersType"
}

func (t UsersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	joinedAtAttribute, ok := attributes["joined_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`joined_at is missing from object`)

		return nil, diags
	}

	joinedAtVal, ok := joinedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`joined_at expected to be basetypes.StringValue, was: %T`, joinedAtAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	rbacRolesAttribute, ok := attributes["rbac_roles"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rbac_roles is missing from object`)

		return nil, diags
	}

	rbacRolesVal, ok := rbacRolesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rbac_roles expected to be basetypes.ListValue, was: %T`, rbacRolesAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return nil, diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	subAttribute, ok := attributes["sub"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub is missing from object`)

		return nil, diags
	}

	subVal, ok := subAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub expected to be basetypes.StringValue, was: %T`, subAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UsersValue{
		Email:     emailVal,
		Id:        idVal,
		JoinedAt:  joinedAtVal,
		Name:      nameVal,
		RbacRoles: rbacRolesVal,
		Role:      roleVal,
		Sub:       subVal,
		Username:  usernameVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewUsersValueNull() UsersValue {
	return UsersValue{
		state: attr.ValueStateNull,
	}
}

func NewUsersValueUnknown() UsersValue {
	return UsersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUsersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UsersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UsersValue Attribute Value",
				"While creating a UsersValue value, a missing attribute value was detected. "+
					"A UsersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UsersValue Attribute Type",
				"While creating a UsersValue value, an invalid attribute value was detected. "+
					"A UsersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UsersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UsersValue Attribute Value",
				"While creating a UsersValue value, an extra attribute value was detected. "+
					"A UsersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UsersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	joinedAtAttribute, ok := attributes["joined_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`joined_at is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	joinedAtVal, ok := joinedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`joined_at expected to be basetypes.StringValue, was: %T`, joinedAtAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	rbacRolesAttribute, ok := attributes["rbac_roles"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rbac_roles is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	rbacRolesVal, ok := rbacRolesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rbac_roles expected to be basetypes.ListValue, was: %T`, rbacRolesAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	subAttribute, ok := attributes["sub"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	subVal, ok := subAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub expected to be basetypes.StringValue, was: %T`, subAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	return UsersValue{
		Email:     emailVal,
		Id:        idVal,
		JoinedAt:  joinedAtVal,
		Name:      nameVal,
		RbacRoles: rbacRolesVal,
		Role:      roleVal,
		Sub:       subVal,
		Username:  usernameVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewUsersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UsersValue {
	object, diags := NewUsersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUsersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UsersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUsersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUsersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUsersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUsersValueMust(UsersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UsersType) ValueType(ctx context.Context) attr.Value {
	return UsersValue{}
}

var _ basetypes.ObjectValuable = UsersValue{}

type UsersValue struct {
	Email     basetypes.StringValue `tfsdk:"email"`
	Id        basetypes.Int64Value  `tfsdk:"id"`
	JoinedAt  basetypes.StringValue `tfsdk:"joined_at"`
	Name      basetypes.StringValue `tfsdk:"name"`
	RbacRoles basetypes.ListValue   `tfsdk:"rbac_roles"`
	Role      basetypes.StringValue `tfsdk:"role"`
	Sub       basetypes.StringValue `tfsdk:"sub"`
	Username  basetypes.StringValue `tfsdk:"username"`
	state     attr.ValueState
}

func (v UsersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["joined_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rbac_roles"] = basetypes.ListType{
		ElemType: RbacRolesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["role"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sub"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.JoinedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["joined_at"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.RbacRoles.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rbac_roles"] = val

		val, err = v.Role.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role"] = val

		val, err = v.Sub.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sub"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UsersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UsersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UsersValue) String() string {
	return "UsersValue"
}

func (v UsersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	rbacRoles := types.ListValueMust(
		RbacRolesType{
			basetypes.ObjectType{
				AttrTypes: RbacRolesValue{}.AttributeTypes(ctx),
			},
		},
		v.RbacRoles.Elements(),
	)

	if v.RbacRoles.IsNull() {
		rbacRoles = types.ListNull(
			RbacRolesType{
				basetypes.ObjectType{
					AttrTypes: RbacRolesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.RbacRoles.IsUnknown() {
		rbacRoles = types.ListUnknown(
			RbacRolesType{
				basetypes.ObjectType{
					AttrTypes: RbacRolesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"email":     basetypes.StringType{},
			"id":        basetypes.Int64Type{},
			"joined_at": basetypes.StringType{},
			"name":      basetypes.StringType{},
			"rbac_roles": basetypes.ListType{
				ElemType: RbacRolesValue{}.Type(ctx),
			},
			"role":     basetypes.StringType{},
			"sub":      basetypes.StringType{},
			"username": basetypes.StringType{},
		},
		map[string]attr.Value{
			"email":      v.Email,
			"id":         v.Id,
			"joined_at":  v.JoinedAt,
			"name":       v.Name,
			"rbac_roles": rbacRoles,
			"role":       v.Role,
			"sub":        v.Sub,
			"username":   v.Username,
		})

	return objVal, diags
}

func (v UsersValue) Equal(o attr.Value) bool {
	other, ok := o.(UsersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.JoinedAt.Equal(other.JoinedAt) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.RbacRoles.Equal(other.RbacRoles) {
		return false
	}

	if !v.Role.Equal(other.Role) {
		return false
	}

	if !v.Sub.Equal(other.Sub) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v UsersValue) Type(ctx context.Context) attr.Type {
	return UsersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UsersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"email":     basetypes.StringType{},
		"id":        basetypes.Int64Type{},
		"joined_at": basetypes.StringType{},
		"name":      basetypes.StringType{},
		"rbac_roles": basetypes.ListType{
			ElemType: RbacRolesValue{}.Type(ctx),
		},
		"role":     basetypes.StringType{},
		"sub":      basetypes.StringType{},
		"username": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RbacRolesType{}

type RbacRolesType struct {
	basetypes.ObjectType
}

func (t RbacRolesType) Equal(o attr.Type) bool {
	other, ok := o.(RbacRolesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RbacRolesType) String() string {
	return "RbacRolesType"
}

func (t RbacRolesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RbacRolesValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewRbacRolesValueNull() RbacRolesValue {
	return RbacRolesValue{
		state: attr.ValueStateNull,
	}
}

func NewRbacRolesValueUnknown() RbacRolesValue {
	return RbacRolesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRbacRolesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RbacRolesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RbacRolesValue Attribute Value",
				"While creating a RbacRolesValue value, a missing attribute value was detected. "+
					"A RbacRolesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RbacRolesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RbacRolesValue Attribute Type",
				"While creating a RbacRolesValue value, an invalid attribute value was detected. "+
					"A RbacRolesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RbacRolesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RbacRolesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RbacRolesValue Attribute Value",
				"While creating a RbacRolesValue value, an extra attribute value was detected. "+
					"A RbacRolesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RbacRolesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRbacRolesValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRbacRolesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewRbacRolesValueUnknown(), diags
	}

	return RbacRolesValue{
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewRbacRolesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RbacRolesValue {
	object, diags := NewRbacRolesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRbacRolesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RbacRolesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRbacRolesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRbacRolesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRbacRolesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRbacRolesValueMust(RbacRolesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RbacRolesType) ValueType(ctx context.Context) attr.Value {
	return RbacRolesValue{}
}

var _ basetypes.ObjectValuable = RbacRolesValue{}

type RbacRolesValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v RbacRolesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RbacRolesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RbacRolesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RbacRolesValue) String() string {
	return "RbacRolesValue"
}

func (v RbacRolesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name": v.Name,
		})

	return objVal, diags
}

func (v RbacRolesValue) Equal(o attr.Value) bool {
	other, ok := o.(RbacRolesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v RbacRolesValue) Type(ctx context.Context) attr.Type {
	return RbacRolesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RbacRolesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name": basetypes.StringType{},
	}
}
